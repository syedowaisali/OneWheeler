//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34011
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using UnityEngine;
using Assets.Scripts.Base;
using Assets.Scripts.Managers;
using Assets.Scripts.Misc;

namespace Assets.Scripts.States.Dust{

	public class DustLevel5 : PlayState{

		public DustLevel5 (StateManager sm) : base(sm) {

		}

		public override void Init (){
			base.Init ();

			// set next state
			manager.SetState (new DustLevel5 (manager));

			if (! SceneManager.IsSceneLoaded (SceneManager.Dust.LEVEL5)) {
				SceneManager.LoadScene (SceneManager.Dust.LEVEL5);
			}
		}

		public override void FinishLevel (){
			base.FinishLevel ();
			
			// set net level unlock
			unlockNextLevel = "dustlevel5lock";
		}

		public override void SetNextState (){
			base.SetNextState ();

			// set next state
			manager.SetState (new DustLevel6 (manager));
		}

		public override void SceneLoaded (int level){
			base.SceneLoaded (level);
			if (StorageManager.IsSoundOn ()) {
				foreach(GameObject hammerClip in GameObject.FindGameObjectsWithTag(Tags.HAMMER_CLIP)){
					hammerClip.GetComponent<AudioSource> ().Play ();
				}
			}
		}

		public override void TriggerEnter2D (Collider2D collider, GameObject sender){
			base.TriggerEnter2D (collider, sender);

			if (sender.name.Equals (GameCenter.Dust.HAMMER_ACTIVATOR)) {
				Object.Destroy(sender);
			}
		}

		public override void ResetCycle (){

			Object.Destroy (GameObject.FindWithTag (Tags.ROLLER));
			Object.Instantiate (manager.gameData.roller);

			base.ResetCycle ();
		}

		public override void Pause (){
			base.Pause ();
			GameObject.FindWithTag (Tags.ROLLER).GetComponent<Rigidbody2D> ().isKinematic = true;
		}

		public override void Resume (){
			base.Resume ();
			GameObject.FindWithTag (Tags.ROLLER).GetComponent<Rigidbody2D> ().isKinematic = false;
		}
	}
}

